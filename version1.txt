import streamlit as st
import pandas as pd
import os
import pickle

def create_sample_data():
    script_dir = os.path.dirname(os.path.abspath(__file__))
    pickle_path = os.path.join(script_dir, 'data', 'euroleague_simulations.pkl')
    with open(pickle_path, 'rb') as f:
        simulation_results_df = pickle.load(f)
    
    team_stats_list = []
    for _, row in simulation_results_df.iterrows():
        team_stats = row['SimmedTeamStats']
        matchup = row['Matchup']
        home_code = row['Home_Code']
        away_code = row['Away_Code']
        
        for metric, value in team_stats.items():
            team_stats_list.append({
                'Matchup': matchup,
                'Team': home_code,
                'Metric': metric,
                'Value': value
            })
    
    player_stats_list = []
    for _, row in simulation_results_df.iterrows():
        player_stats = row['SimmedBoxScore']
        matchup = row['Matchup']
        player_stats_with_matchup = player_stats.copy()
        player_stats_with_matchup['Matchup'] = matchup
        player_stats_list.append(player_stats_with_matchup)
    
    player_stats_df = pd.concat(player_stats_list, ignore_index=True)
    team_stats_df = pd.DataFrame(team_stats_list)
    
    return team_stats_df, player_stats_df

import streamlit as st

def render_stats_tables(selected_matchup, matchups, table_key_prefix=""):
   simulation_results_df = st.session_state.get('simulation_results_df')
   if simulation_results_df is None:
       st.error("Unable to load simulation results")
       return
   
   matchup_data = simulation_results_df[simulation_results_df['Matchup'] == selected_matchup].iloc[0]
   home_logo = matchup_data['Away_Logo']
   away_logo = matchup_data['Home_Logo']
   home_team = matchup_data['Away_Team']
   away_team = matchup_data['Home_Team']
   
   team_stats, player_stats = create_sample_data()
   filtered_team_stats = team_stats[team_stats['Matchup'] == selected_matchup]
   filtered_player_stats = player_stats[player_stats['Matchup'] == selected_matchup]

   # Add state management for HCA and possessions
   if 'hca' not in st.session_state:
       st.session_state.hca = 80
   if 'possessions' not in st.session_state:
       st.session_state.possessions = 72
   
   st.markdown("""
       <style>
       /* Global styles */
       .stApp {
           background-color: #f3f2ef !important;
       }
       
       /* Header styling */
       .sticky-header {
           position: fixed;
           top: 0;
           left: 0;
           right: 0;
           z-index: 999999 !important;
           background-color: white;
           padding: 12px 24px;
           height: 52px;
           box-shadow: 0 0 0 1px rgba(0,0,0,0.08);
           transform: translateZ(0);
           -webkit-transform: translateZ(0);
           display: flex;
           align-items: center;
       }
       
       .title {
           font-size: 20px;
           font-weight: 600;
           color: #0a66c2;
           margin: 0;
           padding-left: 83px;
       }

       .table-container {
           border: none;
           border-radius: 8px;
           background-color: white;
           margin: -5px -10px 10px -10px;
           box-shadow: 0 0 0 1px rgba(0,0,0,0.08);

       }

       .logo-cell {
           display: flex;
           flex-direction: column;
           align-items: center;
           justify-content: center;
           padding: 12px;
           background-color: white;
           border-radius: 8px;
           box-shadow: 0 0 0 1px rgba(0,0,0,0.08);
           margin-bottom: 8px;
           margin-top: -10px;
       }

       .logo-cell img {
           width: 150px;
           height: 150px;
           object-fit: contain;
       }

       .team-name-box {
           background-color: white;
           border-radius: 8px;
           padding: 8px;
           box-shadow: 0 0 0 1px rgba(0,0,0,0.08);
           margin-bottom: 8px;
           width: 100%;
           text-align: center;
       }

       .team-name {
           font-weight: 600;
           font-size: 16px;
           font-family: -apple-system,system-ui,BlinkMacSystemFont,"Segoe UI",Roboto,"Helvetica Neue",Arial,sans-serif;
           color: rgba(0,0,0,0.9);
           white-space: nowrap;
           overflow: hidden;
           text-overflow: ellipsis;
       }

       td.numeric {
           text-align: right;
           font-variant-numeric: tabular-nums;
       }

       .arrow-button:hover {
           background-color: #f3f2ef;
       }

       /* Updated Summary Stats Styling */
       .summary-stats {
           font-family: -apple-system,system-ui,BlinkMacSystemFont,"Segoe UI",Roboto,"Helvetica Neue",Arial,sans-serif;
           overflow: hidden;
           height: 100%;
           display: flex;
           flex-direction: column;
           width: 100%;
           background-color: white;
           border-radius: 8px;
           box-shadow: 0 0 0 1px rgba(0,0,0,0.08);
           padding: 0;
           margin-bottom: 16px;
           margin-top: -10px;
           border: 1px solid #e0e0e0;

       }

       .summary-stats table {
           height: 100%;
           width: 100%;
           border-collapse: separate;
           border-spacing: 0;

       }

       .summary-stats thead {
           height: 1%;
           font-size: 14px;
           background: #f8f9fa;

       }

       .summary-stats th {
           background: linear-gradient(to bottom, #e8f0fa, #d0e0f0) !important;
           color: #1e293b !important;
           font-size: 13px !important;
           font-weight: 600 !important;
           text-align: center !important;
           padding: 12px 8px !important;
           text-transform: uppercase !important;
           letter-spacing: 0.05em !important;
           border-bottom: 2px solid #e0e0e0 !important;
           border-right: 2px solid #e0e0e0 !important;

       }

       .summary-stats td {
           font-size: 23px !important;
           font-weight: 600 !important;
           text-align: center !important;
           padding: 10px !important;
           border-bottom: 1px solid #e0e0e0 !important;
           border-right: 1px solid #e0e0e0 !important;
           vertical-align: middle !important;
           justify-content: center !important;
           color: rgba(0,0,0,0.9);
       }

       .metric-high {
           color: #057642 !important;
       }

       .metric-medium {
           color: #666666 !important;
       }

       .metric-low {
           color: #cc1016 !important;
       }
       </style>
   """, unsafe_allow_html=True)
   
   controls_area, logo_area, stats_area = st.columns([1.5, 3, 3])
   
   with logo_area:
       home_logo_col, vs_col, away_logo_col = st.columns([1, 0.2, 1])
       
       with home_logo_col:
           st.markdown(
               f"""
               <div class="logo-cell">
                   <img src="{home_logo}" alt="{home_team} Logo">
               </div>
               <div class="team-name-box">
                   <div class="team-name">{home_team}</div>
               </div>
               """,
               unsafe_allow_html=True
           )
       
       with vs_col:
           st.markdown("""
           <div style='display: flex; justify-content: center; align-items: center; height: 100%;'>
               <div style='background-color: white; border-radius: 8px; padding: 4px 8px; box-shadow: 0 0 0 1px rgba(0,0,0,0.08); margin-top: 60px;margin-bottom: 20px'>
                   <h3 style='margin: 0; font-size: 36px; color: rgba(0,0,0,0.6);'>@</h3>
               </div>
           </div>
           """, unsafe_allow_html=True)
       
       with away_logo_col:
           st.markdown(
               f"""
               <div class="logo-cell">
                   <img src="{away_logo}" alt="{away_team} Logo">
               </div>
               <div class="team-name-box">
                   <div class="team-name">{away_team}</div>
               </div>
               """,
               unsafe_allow_html=True
           )

   with controls_area:
       st.markdown("<div style='margin-top: 10px;'></div>", unsafe_allow_html=True)
       
       st.markdown(
           f"""
           <div style="font-size: 18px; font-weight: 600; color: rgba(0,0,0,0.6); margin-top: -25px;margin-left: -15px; text-align: center;">Home Court</div>
           """,
           unsafe_allow_html=True
       )
       
       hca_left, hca_display, hca_right = st.columns([0.5, 0.5, 0.5])
       
       with hca_right:
           st.markdown('<div style="margin-top: 3px;">', unsafe_allow_html=True)
           if st.button("⬆️", key=f"{table_key_prefix}_hca_up"):
               st.session_state.hca = min(st.session_state.hca + 5, 300)
           st.markdown('</div>', unsafe_allow_html=True)
       
       with hca_display:
           st.markdown(
               f"""
               <div style="background-color: white; border-radius: 8px; padding: 2px; margin: -5px -10px -10px -32px; box-shadow: 0 0 0 1px rgba(0,0,0,0.08); text-align: center;">
                   <span style="font-weight: bold;font-size:24px; color: rgba(0,0,0,0.6);">{st.session_state.hca}%</span>
               </div>
               """,
               unsafe_allow_html=True
           )
       
       with hca_left:
           st.markdown('<div style="margin-top: 3px;">', unsafe_allow_html=True)
           if st.button("⬇️", key=f"{table_key_prefix}_hca_down"):
               st.session_state.hca = max(st.session_state.hca - 5, 0)
           st.markdown('</div>', unsafe_allow_html=True)

       st.markdown(
           f"""
           <div style="font-size: 18px; font-weight: 600; color: rgba(0,0,0,0.6); margin-bottom: 15px;margin-left: -17px; text-align: center;">Possessions</div>
           """,
           unsafe_allow_html=True
       )
       
       poss_left, poss_display, poss_right = st.columns([0.5, 0.5, 0.5])
       
       with poss_right:
           st.markdown('<div style="margin-top: 3px;">', unsafe_allow_html=True)
           if st.button("⬆️", key=f"{table_key_prefix}_poss_up"):
               st.session_state.possessions += 1
           st.markdown('</div>', unsafe_allow_html=True)
       
       with poss_display:
           st.markdown(
               f"""
               <div style="background-color: white; border-radius: 8px; padding: 2px; margin: -5px -10px -10px -32px; box-shadow: 0 0 0 1px rgba(0,0,0,0.08); text-align: center;">
                   <span style="font-weight: bold; font-size: 24px; color: rgba(0,0,0,0.6);">{st.session_state.possessions}</span>
               </div>
               """,
               unsafe_allow_html=True
           )
       
       with poss_left:
           st.markdown('<div style="margin-top: 5px;">', unsafe_allow_html=True)
           if st.button("⬇️", key=f"{table_key_prefix}_poss_down"):
               st.session_state.possessions = max(st.session_state.possessions - 1, 0)
           st.markdown('</div>', unsafe_allow_html=True)

   with stats_area:
       first_row = simulation_results_df[simulation_results_df['Matchup'] == selected_matchup].iloc[0]
       summary_stats_df = pd.DataFrame(first_row['SimmedTeamStats'][-3:]).T
       
       summary_stats_df.columns = summary_stats_df.iloc[0]
       summary_stats_df = summary_stats_df.drop(summary_stats_df.index[0])
       summary_stats_df = summary_stats_df.rename(columns={'Total Adjusted': 'Total'})
       summary_stats_df = summary_stats_df[['Spread', 'Total', 'Money']]
       
       html_table = """
       <div class="summary-stats">
           <table width="100%">
               <thead>
                   <tr>
                       <th>Team</th>
       """
       for col in summary_stats_df.columns:
           html_table += f"<th>{col}</th>"
       
       html_table += """
                   </tr>
               </thead>
               <tbody>
       """
       
       for idx, row in summary_stats_df.iterrows():
           html_table += "<tr>"
           
           logo_to_use = home_logo if idx == summary_stats_df.index[0] else away_logo
           team_name = home_team if idx == summary_stats_df.index[0] else away_team
           
           html_table += f'''
               <td style="display: flex; align-items: center; justify-content: flex-start; gap: 0px; padding-left: 0px !important;">
                   <div class="logo-cell" style="padding: 0; box-shadow: none; margin: 0; min-width: 48px;">
                       <img src="{logo_to_use}" alt="Logo" style="width: 55px; height: 55px;">
                   </div>
                   <span style="font-size: 16px; font-weight: 500; color: rgba(0,0,0,0.7);"/span>
               </td>
           '''
           
           for col, val in row.items():
               if isinstance(val, (int, float)):
                   if val > 80:
                       style_class = "metric-high"
                   elif val > 50:
                       style_class = "metric-medium"
                   else:
                       style_class = "metric-low"
                   
                   if col == "Money":
                       html_table += f'<td class="{style_class}">{val:.2f}</td>'
                   else:
                       html_table += f'<td class="{style_class}">{val:.1f}</td>'
               else:
                   html_table += f"<td>{val}</td>"
           html_table += "</tr>"
       
       html_table += """
               </tbody>
           </table>
       </div>
       """
       
       st.markdown(html_table, unsafe_allow_html=True)
   
   st.markdown("<div style='margin: 24px 0;'></div>", unsafe_allow_html=True)


   # Team Stats Table (Full Width)
   # Team Stats Table (Full Width)
   team_stats_df = pd.DataFrame(first_row['SimmedTeamStats']).T
  # Reset the index to make the current index a column
   team_stats_df = team_stats_df.reset_index()
  # Set the first row as the new column names
   team_stats_df.columns = team_stats_df.iloc[0]
  # Drop the first row (since it's now the column names)
   team_stats_df = team_stats_df.drop(0).reset_index(drop=True) 

   team_stats_df['3PtA'] = team_stats_df['3pt Attempts']
   team_stats_df['3PtM'] = team_stats_df['3pt Makes']
   team_stats_df['2PtA'] = team_stats_df['2pt Attempts']
   team_stats_df['2PtM'] = team_stats_df['2pt Makes']
   team_stats_df['FTA'] = team_stats_df['FT Attempts']
   team_stats_df['FTM'] = team_stats_df['FT Makes']
   team_stats_df['TO'] = team_stats_df['Turnovers']
   team_stats_df['FTA%'] = team_stats_df['FTA%'] * 100
   team_stats_df['OReb%'] = team_stats_df['OR%'] *100
   team_stats_df['2pt%'] = team_stats_df['2pt%'] * 100
   team_stats_df['3pt%'] = team_stats_df['3pt%'] *100
   team_stats_df['TO%'] = team_stats_df['Turnovers']/team_stats_df['Possessions'] *100
   team_stats_df['eFG%'] = (team_stats_df['2PtM'] + 1.5* team_stats_df['3PtM'])/(team_stats_df['2PtA'] + team_stats_df['3PtA']) *100
   team_stats_df = team_stats_df.rename(columns={'Metric': 'Team'})
   team_stats_df = team_stats_df[['Team','Points','2pt%','3pt%','eFG%','TO%','OReb%','FTA%']]

  # When doing the final transpose, keep the index
   team_stats_df = team_stats_df.set_index('Team').T.reset_index()
   team_stats_df = team_stats_df.rename(columns={'index': 'Metric'})

   team_html = """
   <div class="table-container">
       <table style="width: 100%">
           <thead><tr>{}</tr></thead>
           <tbody>{}</tbody>
       </table>
   </div>
   """
   
   team_header = ''.join(f'<th>{col}</th>' for col in team_stats_df.columns)
   team_rows = ''.join(
        '<tr>' + 
        ''.join(
            f'<td class="numeric">{value:.1f}</td>' 
            if index == 'Points'  # Just decimal for Points row
            else f'<td class="numeric">{value:.1f}%</td>' 
            if isinstance(value, (int, float))  # Add % for all other numeric values
            else f'<td>{value}</td>'  # Non-numeric columns
            for col, value in row.items()
        ) + 
        '</tr>'
        for index, row in team_stats_df.iterrows()
    )
   
   st.markdown(team_html.format(team_header, team_rows), unsafe_allow_html=True)

   # Player Stats Table (Full Width)
   display_columns = [col for col in filtered_player_stats.columns if col not in ['PlayerID', 'Matchup']]
   
   player_html = """
   <div class="table-container">
       <table style="width: 100%">
           <thead><tr>{}</tr></thead>
           <tbody>{}</tbody>
       </table>
   </div>
   """
   
   player_header = ''.join(f'<th>{col}</th>' for col in display_columns)
   player_rows = ''.join(
       '<tr>' + 
       ''.join(f'<td class="numeric">{value:.1f}</td>' if isinstance(value, (int, float)) else f'<td>{value}</td>'
               for value in row) + 
       '</tr>'
       for _, row in filtered_player_stats[display_columns].iterrows()
   )
   
   st.markdown(player_html.format(player_header, player_rows), unsafe_allow_html=True)

      
   if 'edited_minutes' not in st.session_state:
       st.session_state.edited_minutes = {}
       for idx, row in filtered_player_stats.iterrows():
           key = f"{row['Player']}_{row['Team']}"
           st.session_state.edited_minutes[key] = row['Minutes']
   
   for _, row in filtered_player_stats.iterrows():
       key = f"{row['Player']}_{row['Team']}"
       st.session_state.edited_minutes[key] = row['Minutes']
def handle_simulate():
    pass

def main():
    st.set_page_config(layout="wide", page_title="Stretch 5 Analytics")
    
    script_dir = os.path.dirname(os.path.abspath(__file__))
    pickle_path = os.path.join(script_dir, 'data', 'euroleague_simulations.pkl')
    with open(pickle_path, 'rb') as f:
        simulation_results_df = pickle.load(f)

    st.markdown("""
        <style>
        /* Global styles */
        .stApp {
            background-color: #f3f2ef !important;
        }
        
        /* Header styling */
        .sticky-header {
            position: fixed;
            top: 0;
            left: 0;
            right: 0;
            z-index: 999999 !important;
            background-color: white;
            padding: 12px 24px;
            height: 52px;
            box-shadow: 0 0 0 1px rgba(0,0,0,0.08);
            transform: translateZ(0);
            -webkit-transform: translateZ(0);
            display: flex;
            align-items: center;
        }
        
        .title {
            font-size: 20px;
            font-weight: 600;
            color: #0a66c2;
            margin: 0;
            padding-left: 83px;
        }

        div[data-testid="stAppViewContainer"] > div[data-testid="stVerticalBlock"] > div[data-testid="stVerticalBlock"] > div[data-testid="stVerticalBlock"] {
    padding-top: -10px;
    margin-top: -65px;
}
        /* Tab styling */
        /* Tab styling */
.stTabs [data-baseweb="tab-list"] {
   gap: 0;
   background: linear-gradient(45deg, #4b79cf 0%, #6495ed 100%);
   padding: 0;
   margin-top: -35px;
   box-shadow: 0 4px 10px rgba(0, 0, 0, 0.15);
   position: sticky;
   top: 52px;
   z-index: 99;
   border-top: 1px solid rgba(255,255,255,0.3);
   border: 2px;
   border-color: white !important;
   border-radius: 8px !important;
}

.stTabs [data-baseweb="tab"] {
   padding: 16px 32px;
   color: #e2e8f0;
   font-weight: 600;
   font-size: 15px;
   letter-spacing: 0.5px;
   border: 2px;
   border-color: white !important;
   border-radius: 8px !important;
   transition: all 0.3s ease;
   background: linear-gradient(180deg, rgba(255,255,255,0.1) 0%, rgba(255,255,255,0) 100%);
}

.stTabs [data-baseweb="tab"][aria-selected="true"] {
   color: #ffffff;
   background: linear-gradient(180deg, rgba(255,255,255,0.25) 0%, rgba(255,255,255,0.1) 100%);
   box-shadow: inset 0 0 15px rgba(255,255,255,0.2);
   text-shadow: 0 1px 2px rgba(0,0,0,0.1);
   border: 2px;
   border-color: white !important;
   border-radius: 8px !important;
}

.stTabs [data-baseweb="tab"]:hover {
   background: linear-gradient(180deg, rgba(255,255,255,0.2) 0%, rgba(255,255,255,0.05) 100%);
   color: #ffffff;
}
        
        /* Select box enhanced styling */
        .stSelectbox > div[data-baseweb="select"] > div {
            background-color: #fafafa !important;
        }
        
        .stSelectbox > div > div {
            background-color: white !important;
        }
        
        /* Style the select box container */
        div[data-baseweb="select"] {
            background-color: #fafafa !important;
            border-radius: 8px !important;
            margin-top:-47px;
            margin-left:-25px;
            font-weight: bold;
        }
        
        /* Style the select box dropdown */
        div[role="listbox"] {
            background-color: #fafafa !important;
        }
        
        /* Style the select box options */
        div[role="option"] {
            background-color: #fafafa !important;
        }
        
        /* Style the select box when hovered */
        div[data-baseweb="select"]:hover {
            border-color: #0a66c2 !important;
        }
        
        /* Control alignment fixes */
        div[data-testid="stSelect"] {
            margin-top: -1px;
        }
        
        div[data-testid="stButton"] {
            margin-top: -20px;
	    margin-left:12px;
		
        }
        
        /* Button styling */
        div.stButton > button:first-child {
            background-color: #a9a9a9 !important;
            color: #a9a9a9 !important;
            border: 1px solid !important;
            border-radius: 8px !important;
            font-weight: 600 !important;
            padding: 2px 2px !important;
            height: 2px !important;
            font-size: 16px !important;
            transition: all 0.2s ease;
        }
        
        div.stButton > button:hover {
            background-color: #90ee90 !important;
            color: #0a66c2 !important;
        }
        
        /* Table container styling */
        .table-container {
            background-color: white !important;
            border: 2px solid !important;
	    border-color: #a9a9a9 !important;
	    border-width: 3px !important;
	    margin-top:50px;
	    margin-bottom: 40px !important;
            border-radius: 8px !important;


            overflow: hidden;
        }
        
        /* Table styling */
        table {
            background-color: white;
            border-radius: 2px;
            overflow: hidden;
            width: 100%;

        }
        
        /* Header styling */
        th {
            background: linear-gradient(to bottom, #e8f0fa, #d0e0f0); !important;
            color: #1e293b; !important;
            font-weight: 900 !important;
            border: 2px solid #4b9cd3 !important;
	    border-radius: 0px;
	    
            padding: 16px 10px !important;
            text-align: center !important;
            text-transform: uppercase !important;
            font-size: 14px !important;
            letter-spacing: 0.05em !important;
        }
        
        td {
    padding: 10px 2px !important;  /* Increased padding */
    border: 2px solid #4b9cd3 !important;  /* Darker border color */
    font-size: 15px !important;
    font-weight: bold;
    color: #2d3748 !important;  /* Slightly darker text */
    text-align: center !important;
    background-color: white !important;  /* Light background for contrast */
    box-shadow: inset 0 1px 3px rgba(0, 0, 0, 0.1);  /* Soft inner shadow */
    border-radius: 0px;  /* Slight rounding for a softer look */
   

}
        }

        
        /* Row hover effect */
        tr:hover {
            background-color: #f8fafc !important;
            transition: background-color 0.2s ease;
        }
        
        /* Last row styling */
        tr:last-child td {
            border: 2px solid #a9a9a9  !important;  /* Darker border color */
            
        }
        
        /* Summary stats styling */
        .summary-stats {
            background-color: white;
            border-radius: 12px;
	    border-width: 3px !important;
            box-shadow: 0 4px 6px -1px rgba(0, 0, 0, 0.1), 0 2px 4px -1px rgba(0, 0, 0, 0.06);
            padding: 2px;
            font-family: -apple-system,system-ui,BlinkMacSystemFont,"Segoe UI",Roboto,"Helvetica Neue",Arial,sans-serif;
        }
        
        .summary-stats th {
            background-color: #f8fafc !important;
            color: #1e293b !important;
            border: 2px solid rgba(0,0,0,0.1) !important;
            border-width: 3px !important;
            font-size: 13px !important;
            text-transform: uppercase !important;
            letter-spacing: 0.05em !important;
            padding: 16px 20px !important;
        }
        
        .summary-stats td {
            border-bottom: 1px solid rgba(0,0,0,0.06) !important;
            font-size: 15px !important;
            padding: 1px 2px !important;
            color: #334155 !important;

        }
        
        /* Alternating row colors */
        tr:nth-child(even) {
            background-color: #fafafa !important;
        }
        
        /* Logo cell styling */
        .logo-cell {
            background-color: white;
            border-radius: 8px;
            padding: 16px;
            box-shadow: 0 0 0 1px rgba(0,0,0,0.08);
            margin-bottom: 16px;
            display: flex;
            flex-direction: column;
            align-items: center;
            gap: 8px;
        }
        
        .logo-cell img {
            width: 120px;
            height: 120px;
            object-fit: contain;
        }
        
        .team-name {
            font-size: 16px;
            font-weight: 600;
            color: #666666;
            text-align: center;
        }
        
        /* Info message styling */
        .stInfo {
            background-color: white;
            border: 1px solid rgba(0,0,0,0.08);
            border-radius: 8px;
            padding: 16px;
        }
        
        /* Content wrapper */
        .content-wrapper {
            max-width: 1128px;
            margin: 0 auto;
            padding: 20px 16px;
        }
        
        /* Numeric cell styling */
        td.numeric {
            text-align: right;
            font-variant-numeric: tabular-nums;
        }
        
        /* Metric styling */
        .metric-high {
            color: #057642;
            font-weight: 600;
        }
        
        .metric-medium {
            color: #666666;
            font-weight: 500;
        }
        
        .metric-low {
            color: #cc1016;
            font-weight: 500;
        }
        
        /* DataFrame styling */
        .dataframe {
            background-color: white;
            border-radius: 8px;
            box-shadow: 0 0 0 1px rgba(0,0,0,0.08);
            padding: 16px;
        }
        
        .arrow-button {

            font-size:2px;
            padding: 0 !important;
        }
        
        /* Hide Streamlit branding */
        #MainMenu {visibility: hidden;}
        footer {visibility: hidden;}
     
        /* Hide Streamlit branding */
        #MainMenu {visibility: hidden;}
        footer {visibility: hidden;}
        </style>
    """, unsafe_allow_html=True)
    
    st.markdown("""
        <div class="sticky-header">
            <h2 class="title">Stretch 5 Analytics</h2>
        </div>
    """, unsafe_allow_html=True)
    sport_tabs = st.tabs(["Euroleague", "EuroCup", "NCAAB", "NBA"])
    
    st.markdown('<div class="content-wrapper">', unsafe_allow_html=True)
    
    team_stats, player_stats = create_sample_data()
    if 'team_stats' not in st.session_state:
        st.session_state['team_stats'] = team_stats
    if 'player_stats' not in st.session_state:
        st.session_state['player_stats'] = player_stats
    
    matchups = team_stats['Matchup'].unique().tolist()
    
    if 'simulation_results_df' not in st.session_state:
        st.session_state['simulation_results_df'] = simulation_results_df
    
    st.markdown("""
    <style>
        .stTabs [data-baseweb="tab-list"] {
            margin-top: -10px; /* Adjust this value to control spacing */
        }
    </style>
""", unsafe_allow_html=True)

    
    with sport_tabs[0]:
        analysis_tabs = st.tabs(["Simulate Games", "Team Stats", "Player Stats", "Player Ratings"])
        
        with analysis_tabs[0]:
            st.markdown("""
                <style>
                div[data-testid="stSelect"] {
                    margin-top: -15px !important;
                }
                div[data-testid="stButton"] {
                    margin-top: -20px;
                }
                </style>
                """, unsafe_allow_html=True)
            # Create three columns for the controls
            col0, col1, col2 = st.columns([1, 3, 5.15])
            
            with col0:
                if st.button('🔄 Simulate', key='simulate_button', help='Run Simulation'):
                    handle_simulate()

            with col1:
                selected_matchup = st.selectbox(
                    'Select Matchup',
                    matchups,
                    key='simulate_matchup_select',
                    label_visibility='hidden'
                )
            
            with col2:
                matchup_data = simulation_results_df[simulation_results_df['Matchup'] == selected_matchup].iloc[0]
                time_value = matchup_data.get('Time', 'N/A')
                arena_value = matchup_data.get('Arena', 'N/A')
                
                st.markdown(
                    f"""
                    <div style="background-color: white; border-radius: 8px; padding: 6px; margin-top: -20px; box-shadow: 0 0 0 1px rgba(0,0,0,0.08); margin-bottom: -15px; display: flex; justify-content: center; align-items: center; gap: 90px;">
                        <div style="text-align: center; font-weight: bold; color: rgba(0,0,0,0.6); font-size: 18px;">{time_value}</div>
                        <div style="text-align: center; font-weight: bold; color: rgba(0,0,0,0.6); font-size: 18px;">{arena_value}</div>
                    </div>
                    """,
                    unsafe_allow_html=True
                )
            
            render_stats_tables(selected_matchup, matchups, "simulate")
            
        with analysis_tabs[1]:
            pass
                
        with analysis_tabs[2]:
            pass

        with analysis_tabs[3]:
            ratings_data = pd.DataFrame([
                {
                    'Player': 'LLULL, SERGIO',
                    'Team': 'MAD',
                    'fta_D': 1493.298658,
                    'ftm_D': 1500.021266,
                    'oreb_D': 1472.002569,
                    'to_D': 1484.861296,
                    'pace_D': 1493.499008,
                    'usage_D': 1478.571180
                },
                {
                    'Player': 'LAZIC, OGNJEN',
                    'Team': 'RED',
                    'fta_D': 1492.127987,
                    'ftm_D': 1499.989145,
                    'oreb_D': 1483.225281,
                    'to_D': 1499.537630,
                    'pace_D': 1499.722144,
                    'usage_D': 1500.851040
                },
                {
                    'Player': 'MARJANOVIC, BOBAN',
                    'Team': 'ULK',
                    'fta_D': 1483.681565,
                    'ftm_D': 1499.919464,
                    'oreb_D': 1475.809375,
                    'to_D': 1494.835032,
                    'pace_D': 1500.222527,
                    'usage_D': 1502.690334
                },
                {
                    'Player': 'MOTIEJUNAS, DONATAS',
                    'Team': 'MCO',
                    'fta_D': 1471.594412,
                    'ftm_D': 1499.963974,
                    'oreb_D': 1492.904472,
                    'to_D': 1498.713609,
                    'pace_D': 1504.851091,
                    'usage_D': 1491.519525
                }
            ])

            st.dataframe(
                ratings_data.style.format({
                    'fta_D': '{:.6f}',
                    'ftm_D': '{:.6f}',
                    'oreb_D': '{:.6f}',
                    'to_D': '{:.6f}',
                    'pace_D': '{:.6f}',
                    'usage_D': '{:.6f}'
                }),
                hide_index=True,
                use_container_width=True
            )
    
    with sport_tabs[1]:
        st.info("EuroCup analytics coming soon!")
    with sport_tabs[2]:
        st.info("NCAAB analytics coming soon!")
    with sport_tabs[3]:
        st.info("NBA analytics coming soon!")
    
    st.markdown('</div>', unsafe_allow_html=True)

if __name__ == "__main__":
    main()